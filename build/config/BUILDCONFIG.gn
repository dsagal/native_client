# Copyright (c) 2014 The NativeClient Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# =============================================================================
# BUILD FLAGS
# =============================================================================
#
# This block lists input arguments to the build, along with their default
# values. GN requires listing them explicitly so it can validate input and have
# a central place to manage the build flags.
#
# If a value is specified on the command line, it will overwrite the defaults
# given here, otherwise the default will be injected into the root scope.
#
# KEEP IN ALPHABETICAL ORDER and write a good description for everything.
# Use "is_*" names for intrinsic platform descriptions and build modes, and
# "use_*" names for optional features libraries, and configurations.
declare_args() {
  # How many symbols to include in the build. This affects the performance of
  # the build since the symbols are large and dealing with them is slow.
  #   2 means regular build with symbols.
  #   1 means minimal symbols, usually enough for backtraces only.
  #   0 means no symbols.
  symbol_level = 2

  # Debug build.
  is_debug = true

  # Set to true when compiling with the Clang compiler. Typically this is used
  # to configure warnings.
  is_clang = false

  # These are not used by NativeClient, but added for compatiblity with
  # Chrome build files.
  is_android = false
  is_chrome_branded = false
  is_chromeos = false

  is_asan = false
  is_lsan = false
  is_msan = false
  is_tsan = false
}


# =============================================================================
# OS DEFINITIONS
# =============================================================================
#
# We set these various is_FOO booleans for convenience in writing OS-based
# conditions.
#
# Do not add more is_* variants here for random lesser-used Unix systems like
# aix or one of the BSDs. If you need to check these, just check the os value
# directly.

if (os == "win") {
  is_linux = false
  is_mac = false
  is_posix = false
  is_win = true
} else if (os == "mac") {
  is_linux = false
  is_mac = true
  is_posix = true
  is_win = false
  if (!is_clang) {
    is_clang = true  # Always use clang on Mac.
  }
} else if (os == "linux") {
  is_linux = true
  is_mac = false
  is_posix = true
  is_win = false
}

# We do not use assignment filters
set_sources_assignment_filter([])

# =============================================================================
# BUILD OPTIONS
# =============================================================================

# These Sanitizers all imply using the Clang compiler. On Windows they either
# don't work or work differently.
if (!is_clang && (is_asan || is_lsan || is_tsan || is_msan)) {
  is_clang = true
}

# =============================================================================
# TARGET DEFAULTS
# =============================================================================
#
# Set up the default configuration for every build target of the given type.
# The values configured here will be automatically set on the scope of the
# corresponding target. Target definitions can add or remove to the settings
# here as needed.

# Holds all configs used for making native executables and libraries, to avoid
# duplication in each target below.
native_compiler_configs = [
  "//native_client/build/config:nacl_defines",
  "//native_client/build/config/compiler:compiler",
  "//native_client/build/config/compiler:default_warnings",
  "//native_client/build/config/compiler:no_rtti",
]

if (is_clang) {
  native_compiler_configs += [ "//native_client/build/config/clang:find_bad_constructs" ]
}

# Optimizations and debug checking.
if (is_debug) {
  native_compiler_configs += [ "//native_client/build/config:debug" ]
  default_optimization_config = "//native_client/build/config/compiler:no_optimize"
} else {
  native_compiler_configs += [ "//native_client/build/config:release" ]
  default_optimization_config = "//native_client/build/config/compiler:optimize"
}

native_compiler_configs += [ default_optimization_config ]

# Symbol setup.
if (is_clang && is_linux) {
  # Clang creates chubby debug information, which makes linking very slow.
  # For now, don't create debug information with clang.
  # See http://crbug.com/70000
  # TODO(brettw) This just copies GYP. Why not do this on Mac as well?
  default_symbols_config = "//native_client/build/config/compiler:no_symbols"
} else if (symbol_level == 2) {
  default_symbols_config = "//native_client/build/config/compiler:symbols"
} else if (symbol_level == 1) {
  default_symbols_config = "//native_client/build/config/compiler:minimal_symbols"
} else if (symbol_level == 0) {
  default_symbols_config = "//native_client/build/config/compiler:no_symbols"
} else {
  assert(false, "Bad value for symbol_level.")
}
native_compiler_configs += [ default_symbols_config ]


# Windows linker setup for EXEs and DLLs.
if (is_win) {
  windows_linker_configs = [
    default_incremental_linking_config,
    "//native_client/build/config/win:sdk_link",
    "//native_client/build/config/win:common_linker_setup",
  ]
}

set_defaults("executable") {
  configs = native_compiler_configs + [
    "//build/config:default_libs",
  ]
  if (is_win) {
    configs += windows_linker_configs
  } else if (is_mac) {
    configs += [
      "///native_clientbuild/config/mac:mac_dynamic_flags",
      "//native_client/build/config/mac:mac_executable_flags" ]
  } else if (is_linux) {
    configs += [ "//native_client/build/config/linux:executable_ldconfig" ]
  }
}

set_defaults("static_library") {
  configs = native_compiler_configs
}

set_defaults("shared_library") {
  configs = native_compiler_configs + [
    "//build/config:default_libs",
  ]
  if (is_win) {
    configs += windows_linker_configs
  } else if (is_mac) {
    configs += [ "//build/config/mac:mac_dynamic_flags" ]
  }
}

set_defaults("source_set") {
  configs = native_compiler_configs
}

# ==============================================================================
# TOOLCHAIN SETUP
# ==============================================================================
#
# Here we set the default toolchain, as well as the variable host_toolchain
# which will identify the toolchain corresponding to the local system when
# doing cross-compiles. When not cross-compiling, this will be the same as the
# default toolchain.

if (is_win) {
  # TODO(brettw) name the toolchains the same as cpu_arch as with Linux below
  # to eliminate these conditionals.
  if (build_cpu_arch == "x64") {
    host_toolchain = "//native_client/build/toolchain/win:64"
  } else if (build_cpu_arch == "x86") {
    host_toolchain = "//native_client/build/toolchain/win:32"
  }

  if (cpu_arch == "x64") {
    set_default_toolchain("//native_client/build/toolchain/win:64")
  } else if (cpu_arch == "x86") {
    set_default_toolchain("//native_client/build/toolchain/win:32")
  }
} else if (is_linux) {
  host_toolchain = "//native_client/build/toolchain/linux:$build_cpu_arch"
  set_default_toolchain("//native_client/build/toolchain/linux:$cpu_arch")
} else if (is_mac) {
  host_toolchain = "//native_client/build/toolchain/mac:clang"
  set_default_toolchain(host_toolchain)
} else if (is_ios) {
  host_toolchain = "//native_client/build/toolchain/mac:host_clang"
  set_default_toolchain("//native_client/build/toolchain/mac:clang")
}
