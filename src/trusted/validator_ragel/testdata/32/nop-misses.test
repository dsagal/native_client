@hex:
  # The following are examples of input sequences that almost look like
  # predefined nop instruction sequences, but differ by 1, just to show
  # that we do reject them.
  
  
  
  
  
  # This is the correct nop case.
  66 0f 1f 44 00 00
  
  # This is an example where we have incremented the nop by 1.
  66 0f 1f 44 00 01
  
  # This is the (repeated) correct nop case.
  66 0f 1f 44 00 00
  
  # This is an example where we have decremented the nop by 1.
  66 0f 1f 43
  ff ff
  
  # This is the (repeated) correct nop case.
  66 0f 1f 44 00 00
  
  # Filler (add) to align block.
  00 00
  
  
  
  
  
  # This is an example of a different, correct, nop case.
  66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00
  
  # This is an example where we have incremented the nop by 1.
  66 66 66 66 66
  2e 0f 1f 84 00 00 00 00 01
  
  # Filler (move) to fill the rest of the block.
  66 bf 88 77
  
  # This is the (repeated) correct nop case.
  66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00
  
  # This is an example where we have decremented the nop by 1.
  66 66 66 66 66
  2e 0f 1f 83 ff ff ff ff ff
  
  # Filler to realign the decoder.
  00
  
  # Filler (add) to fill the rest of the block.
  02 04 00
  
  # This is the (repeated) correct nop case.
  66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00
  
  
  
  
  
  
  
  # This is the list of all nops, just to see if they validate.
  66 0f 1f 44 00 00
  66 0f 1f 84 00 00 00 00 00
  # Filler (add) to fill the rest of the block.
  02 04 00
  66 2e 0f 1f 84 00 00 00 00 00
  66 66 2e 0f 1f 84 00 00 00 00 00
  # Filler (2 moves) to fill the rest of the block.
  66 a3 44 33 22 11
  a0 44 33 22 11
  66 66 66 2e 0f 1f 84 00 00 00 00 00
  66 66 66 66 2e 0f 1f 84 00 00 00 00 00
  # Filler (move, nop) to fill the rest of the block.
  66 a3 44 33 22 11
  90
  66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00
  66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00
@dis:
     0:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)
     6:	66 0f 1f 44 00 01    	nopw   0x1(%eax,%eax,1)
     c:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)
    12:	66 0f 1f 43 ff       	nopw   -0x1(%ebx)
    17:	ff 66 0f             	jmp    *0xf(%esi)
    1a:	1f                   	pop    %ds
    1b:	44                   	inc    %esp
    1c:	00 00                	add    %al,(%eax)
    1e:	00 00                	add    %al,(%eax)
    20:	66 66 66 66 66 2e 0f 	nopw   %cs:0x0(%eax,%eax,1)
    27:	1f 84 00 00 00 00 00 
    2e:	66 66 66 66 66 2e 0f 	nopw   %cs:0x1000000(%eax,%eax,1)
    35:	1f 84 00 00 00 00 01 
    3c:	66 bf 88 77          	mov    $0x7788,%di
    40:	66 66 66 66 66 2e 0f 	nopw   %cs:0x0(%eax,%eax,1)
    47:	1f 84 00 00 00 00 00 
    4e:	66 66 66 66 66 2e 0f 	nopw   %cs:-0x1(%ebx)
    55:	1f 83 ff ff ff ff 
    5b:	ff 00                	incl   (%eax)
    5d:	02 04 00             	add    (%eax,%eax,1),%al
    60:	66 66 66 66 66 2e 0f 	nopw   %cs:0x0(%eax,%eax,1)
    67:	1f 84 00 00 00 00 00 
    6e:	66 0f 1f 44 00 00    	nopw   0x0(%eax,%eax,1)
    74:	66 0f 1f 84 00 00 00 	nopw   0x0(%eax,%eax,1)
    7b:	00 00 
    7d:	02 04 00             	add    (%eax,%eax,1),%al
    80:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%eax,%eax,1)
    87:	00 00 00 
    8a:	66 66 2e 0f 1f 84 00 	nopw   %cs:0x0(%eax,%eax,1)
    91:	00 00 00 00 
    95:	66 a3 44 33 22 11    	mov    %ax,0x11223344
    9b:	a0 44 33 22 11       	mov    0x11223344,%al
    a0:	66 66 66 2e 0f 1f 84 	nopw   %cs:0x0(%eax,%eax,1)
    a7:	00 00 00 00 00 
    ac:	66 66 66 66 2e 0f 1f 	nopw   %cs:0x0(%eax,%eax,1)
    b3:	84 00 00 00 00 00 
    b9:	66 a3 44 33 22 11    	mov    %ax,0x11223344
    bf:	90                   	nop
    c0:	66 66 66 66 66 2e 0f 	nopw   %cs:0x0(%eax,%eax,1)
    c7:	1f 84 00 00 00 00 00 
    ce:	66 66 66 66 66 66 2e 	nopw   %cs:0x0(%eax,%eax,1)
    d5:	0f 1f 84 00 00 00 00 
    dc:	00 
@rdfa_output:
  6: [0] unrecognized instruction
  12: [1] unrecognized instruction
  16: [2] unrecognized instruction
  2e: [0] unrecognized instruction
  33: [1] unrecognized instruction
  4e: [0] unrecognized instruction
  53: [1] unrecognized instruction
  return code: 1
