@hex:
  # Show that we handle the expected sandboxing instructions for maskmov.
  
  # Case one: correct masking of segment DS:%rsi
  # mov %edi, %edi
  89 ff
  # lea (%r15, %rdi), %rdi
  49 8d 3c 3f
  # maskmovq %mm1, %mm2
  0f f7 d1
  
  # Case two: incorrect masking of segment DS:%rsi
  # add %edi, %edi
  01 ff
  # lea (%r15, %rdi), %rdi
  49 8d 3c 3f
  # maskmovq %mm1, %mm2
  0f f7 d1
  
  # Maskmovdqu is also fine
  # mov %edi, %edi
  89 ff
  # lea (%r15, %rdi), %rdi
  49 8d 3c 3f
  # maskmovdqu %xmm1, %xmm2
  66 0f f7 d1
  
  90 90 90 90
  
  # But vmaskmovdqu is not
  #   mov %edi, %edi
  #   lea (%r15, %rdi), %rdi
  #   vmaskmovdqu %xmm1, %xmm2
  # (machine code is written in one line to avoid spurious errors caused
  # by nop patching)
  89 ff  49 8d 3c 3f  c5 f9 f7 d1
@dis:
     0:	89 ff                	mov    %edi,%edi
     2:	49 8d 3c 3f          	lea    (%r15,%rdi,1),%rdi
     6:	0f f7 d1             	maskmovq %mm1,%mm2
     9:	01 ff                	add    %edi,%edi
     b:	49 8d 3c 3f          	lea    (%r15,%rdi,1),%rdi
     f:	0f f7 d1             	maskmovq %mm1,%mm2
    12:	89 ff                	mov    %edi,%edi
    14:	49 8d 3c 3f          	lea    (%r15,%rdi,1),%rdi
    18:	66 0f f7 d1          	maskmovdqu %xmm1,%xmm2
    1c:	90                   	nop
    1d:	90                   	nop
    1e:	90                   	nop
    1f:	90                   	nop
    20:	89 ff                	mov    %edi,%edi
    22:	49 8d 3c 3f          	lea    (%r15,%rdi,1),%rdi
    26:	c5 f9 f7 d1          	vmaskmovdqu %xmm1,%xmm2
@rdfa_output:
  f: [0] unrecognized instruction
  20: [0] unrecognized instruction
  return code: 1
