# Copyright (c) 2014 The Native ClientAuthors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#  Autogenerated from ../src/untrusted/nacl/nacl.scons.

import("//native_client/build/toolchain/nacl/nacl_sdk.gni")


static_library("nacl") {
  cflags_c = []
  sources = [
    "gc_hooks.c",
    "nacl_irt.c",
    "nacl_irt_init.c",
    "nacl_tls_get.c",
    "nacl_tls_init.c",
    "random.c",
  ]

  if (nacl_libc != "glibc") {
    sources += [
      "_exit.c",
      "access.c",
      "chdir.c",
      "chmod.c",
      "clock.c",
      "clock_getres.c",
      "clock_gettime.c",
      "close.c",
      "dup.c",
      "fchdir.c",
      "fchmod.c",
      "fdatasync.c",
      "fstat.c",
      "fsync.c",
      "ftruncate.c",
      "getcwd.c",
      "getdents.c",
      "gethostname.c",
      "getpagesize.c",
      "getpid.c",
      "gettimeofday.c",
      "isatty.c",
      "link.c",
      "lock.c",
      "lseek.c",
      "lstat.c",
      "malloc.c",
      "mkdir.c",
      "mmap.c",
      "mprotect.c",
      "munmap.c",
      "nacl_add_tp.c",
      "nacl_interface_query.c",
      "nacl_irt_fdio.c",
      "nacl_irt_filename.c",
      "nacl_read_tp.c",
      "nanosleep.c",
      "open.c",
      "pthread_initialize_minimal.c",
      "pthread_stubs.c",
      "read.c",
      "readlink.c",
      "rename.c",
      "rmdir.c",
      "sbrk.c",
      "sched_yield.c",
      "stacktrace.c",
      "start.c",
      "stat.c",
      "stubs/_execve.c",
      "stubs/chown.c",
      "stubs/endpwent.c",
      "stubs/environ.c",
      "stubs/fchown.c",
      "stubs/fcntl.c",
      "stubs/fork.c",
      "stubs/get_current_dir_name.c",
      "stubs/getegid.c",
      "stubs/geteuid.c",
      "stubs/getgid.c",
      "stubs/getlogin.c",
      "stubs/getppid.c",
      "stubs/getpwent.c",
      "stubs/getpwnam.c",
      "stubs/getpwnam_r.c",
      "stubs/getpwuid.c",
      "stubs/getpwuid_r.c",
      "stubs/getrusage.c",
      "stubs/getuid.c",
      "stubs/getwd.c",
      "stubs/ioctl.c",
      "stubs/issetugid.c",
      "stubs/kill.c",
      "stubs/lchown.c",
      "stubs/llseek.c",
      "stubs/pipe.c",
      "stubs/pselect.c",
      "stubs/select.c",
      "stubs/setegid.c",
      "stubs/seteuid.c",
      "stubs/setgid.c",
      "stubs/setpwent.c",
      "stubs/settimeofday.c",
      "stubs/setuid.c",
      "stubs/signal.c",
      "stubs/sigprocmask.c",
      "stubs/tcdrain.c",
      "stubs/tcflow.c",
      "stubs/tcflush.c",
      "stubs/tcgetattr.c",
      "stubs/tcsendbreak.c",
      "stubs/tcsetattr.c",
      "stubs/times.c",
      "stubs/ttyname.c",
      "stubs/ttyname_r.c",
      "stubs/umask.c",
      "stubs/utime.c",
      "stubs/vfork.c",
      "stubs/wait.c",
      "stubs/waitpid.c",
      "symlink.c",
      "sysconf.c",
      "tls.c",
      "truncate.c",
      "unlink.c",
      "utimes.c",
      "write.c",
    ]
  }

  if ((nacl_libc != "glibc") && (cpu_arch == "arm")) {
    sources += [
      "aeabi_read_tp.S",
    ]
  }

  cflags_c += ["-std=c99"]
  if (cpu_arch == "pnacl") {
    cflags_c += [
      "-Wno-self-assign",
      "-allow-asm",
    ]
  }
}


NaClDualLibrary("nacl_exception") {
  cflags_c = []
  sources = [
    "nacl_exception.c",
  ]

  if (cpu_arch == "pnacl") {
    cflags_c += [
      "-Wno-self-assign",
      "--allow-asm",
    ]
  }
}

NaClDualLibrary("nacl_list_mappings") {
  cflags_c = []
  sources = [
    "list_mappings.c",
  ]

  if (cpu_arch == "pnacl") {
    cflags_c += [
      "-Wno-self-assign",
      "--allow-asm",
    ]
  }
}
