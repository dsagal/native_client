# -*- python -*-
# Copyright (c) 2012 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

Import('env')

if 'TRUSTED_ENV' not in env:
  Return()

if env.UnderWindowsCoverage():
  Return()

if env.Bit('target_arm') or env.Bit('target_mips32'):
  if env.UsingEmulator():
    # These tests do not work under qemu.
    Return()
  # Use the system's ARM/MIPS GDB because the NaCl toolchain does not
  # include a copy of GDB built to run on ARM/MIPS.
  env.Replace(GDB='gdb')
  # Unlike nacl-gdb, the system version of GDB does not support the
  # "nacl-irt" command.
  if env.Bit('tests_use_irt'):
    Return()

# We need -O0 to make stepping predictable and read local variables/function
# arguments that may otherwise be optimized out.
env.Append(CCFLAGS=['-O0', '-g', '-fno-omit-frame-pointer'])
# We need to disable PNaCl's link time optimizations so that functions
# do not get inlined, so that we can set breakpoints on these
# functions.  Also make translation optimizaton level -O0.
if not env.AllowNonStableBitcode():
  Return()
if env.Bit('bitcode'):
  env.Append(LINKFLAGS=['-O0'])
  env.Append(TRANSLATEFLAGS=['-O0'])

test_args = ['--gdb', env['GDB'],
             '--output_dir', env.subst('${TARGET_ROOT}/test_results')]
if env.Bit('tests_use_irt'):
  test_args += ['--irt', env.GetIrtNexe()]
if not env.Bit('nacl_static_link'):
  test_args += ['--ld_so', env.File('${NACL_SDK_LIB}/runnable-ld.so'),
                '--library_path', env['NACL_SDK_LIB']]
test_args += ['--'] + env.AddBootstrap(env.GetSelLdr(), ['-v'])

extra_deps = [env.File('gdb_test.py')]

test_suites = ['medium_tests', 'gdb_tests']

gdb_test_guest = env.ComponentProgram(
    'gdb_test_guest', 'gdb_test_guest.c',
    EXTRA_LIBS=['${NONIRT_LIBS}'])
gdb_test_guest = env.GetTranslatedNexe(gdb_test_guest)

# GDB treats multithreaded programs specially. Provide distinct nexe for
# multithreaded tests to isolate multiple threads-specific issues.
gdb_test_guest_thread = env.ComponentProgram(
    'gdb_test_guest_thread', 'gdb_test_guest_thread.c',
    EXTRA_LIBS=['${PTHREAD_LIBS}', '${NONIRT_LIBS}'])
gdb_test_guest_thread = env.GetTranslatedNexe(gdb_test_guest_thread)


# TempFileArguments: gdb_test_guest-based tests below accept a
# temporary file argument, and we encapsulate this here for brevity /
# to avoid code duplication.
def TempFileArguments():
  temp_handle, temp_path = env.MakeTempFile(prefix='nacl_gdb_test_')
  os.close(temp_handle)
  return ','.join(['-f', temp_path])


def AddGdbTest(name, is_broken=False, is_thread_test=False):
  if is_thread_test:
    script_args = ['--nexe', gdb_test_guest_thread]
  else:
    script_args = ['--nexe', gdb_test_guest,
                   '--nexe_args', TempFileArguments()]
  node = env.CommandTest('%s.out' % name,
                         extra_deps=extra_deps,
                         command=(['${PYTHON}', env.File('%s.py' % name)]
                                  + script_args
                                  + test_args))
  env.TestBindsFixedTcpPort(node)
  env.AddNodeToTestSuite(node, test_suites, 'run_gdb_%s_test' % name,
                         is_broken=is_broken)


AddGdbTest('stepi_after_break')
AddGdbTest('invalid_memory')

# This fails on ARM+PNaCl. The set_global_var function appears to be
# getting the wrong argument value (68K vs 1), so the value of
# global_var doesn't match the expected value.
# TODO(mseaborn): Investigate and enable this test.
# http://code.google.com/p/nativeclient/issues/detail?id=3252
AddGdbTest('print_symbol',
           is_broken=env.Bit('bitcode') and env.Bit('target_arm'))

# This fails on ARM+PNaCl because it gets an
# unexpected value for a function argument from
# the stack backtrace.
# TODO(mseaborn): Investigate and enable this test.
# http://code.google.com/p/nativeclient/issues/detail?id=3252
AddGdbTest('stack_trace',
           is_broken=env.Bit('bitcode') and env.Bit('target_arm'))

AddGdbTest('step_from_func_start')

# This fails on MIPS, since GDB for MIPS executes inferior calls on stack
# (call dummy location in MIPS GDB is set as ON_STACK method). Since the stack
# is not executable under NaCl, this makes inferior call impossible to execute.
AddGdbTest('call_from_gdb', is_broken=env.Bit('target_mips32'))

# This fails on ARM/MIPS+PNaCl because it is reading
# local_var before it has been initialised.
# TODO(mseaborn): Investigate and enable this test.
# http://code.google.com/p/nativeclient/issues/detail?id=3252
AddGdbTest('change_variable',
           is_broken=((env.Bit('bitcode') and env.Bit('target_arm')) or
                      env.Bit('target_mips32')))

if not env.Bit('nacl_static_link'):
  AddGdbTest('execute_nacl_manifest_twice')

AddGdbTest('break_continue_thread', is_thread_test=True)
AddGdbTest('syscall_thread', is_thread_test=True)

# We don't run this test on non-x86 architectures or PNaCl since it
# contains inline assembly.
if env.Bit('target_x86') and not env.Bit('bitcode'):
  AddGdbTest('mmap')
