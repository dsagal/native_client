# -*- python -*-
# Copyright (c) 2014 The Native Client Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

Import('env')

if not env.Bit('bitcode'):
  Return()
# Translating the PSO to an ELF DSO doesn't work on x86-64 yet.  The
# Gold linker complains that the input "requires dynamic R_X86_64_32
# reloc against <blah> which may overflow at runtime".  (In contrast,
# the BFD linker in the glibc toolchain does handle this relocation.)
# TODO(mseaborn): Fix this and enable the test for x86-64.
if env.Bit('build_x86_64'):
  Return()
# TODO(sbc): Enable this test for mips.
if env.Bit('build_mips32'):
  Return()
# The sandboxed translator does not support translating PSOs yet.
if env.Bit('use_sandboxed_translator'):
  Return()


def MakeAndTranslatePso(dest, bitcode_file, llvm_passes):
  # Run opt to optionally apply PNaCl ABI simplifications to the IR and to
  # run the PNaCl ABI checker.  We are bypassing pnacl-ld for now because
  # its invocation of Gold internalizes __pnacl_pso_root, which we want to
  # keep externally-visible.
  opt_result = env.Command(
      dest + '.nonfinal.pso', [bitcode_file],
      '${PNACLOPT} ' + llvm_passes + ' '
      '-verify-pnaclabi-module -verify-pnaclabi-functions '
      '-pnaclabi-allow-debug-metadata '
      '${SOURCES} -o ${TARGET}')
  # Finalize to strip debugging info and to emit PNaCl bitcode.
  finalized_result = env.Command(
      dest + '.final.pso', [opt_result],
      '${PNACLFINALIZE} ${SOURCES} -o ${TARGET}')
  # Translate to an ELF loadable object.
  translated_dso = env.Command(dest + '.so', [finalized_result],
                               '${TRANSLATE} -pso ${SOURCES} -o ${TARGET}')
  return translated_dso


def PsoFromLLVMAssembly(base_name):
  bitcode_file = env.Command(
      '%s.bc' % base_name, ['%s.ll' % base_name],
      [Action('${ASCOM}', '${ASCOMSTR}')])
  return MakeAndTranslatePso(base_name, [bitcode_file],
                             # Skip PNaCl passes because they add TLS functions.
                             llvm_passes='')


LLVM_PASSES = (
    # The following is a subset of "-pnacl-abi-simplify-preopt".  We don't
    # want to run the full "-pnacl-abi-simplify-preopt" because it
    # internalizes symbols that we want to export via "-convert-to-pso".
    '-nacl-global-cleanup '
    '-expand-varargs '
    '-rewrite-pnacl-library-calls '
    '-rewrite-llvm-intrinsic-calls '
    '-convert-to-pso '
    '-pnacl-abi-simplify-postopt')


def MakeAndTranslatePll(dest, source_file):
  return MakeAndTranslatePso(
      dest, [env.ComponentObject(source_file)],
      # Skip the pre-opt passes because they add TLS functions.  However,
      # we still need to run the post-opt passes so that the LLVM IR passes
      # the PNaCl ABI checker.
      llvm_passes=LLVM_PASSES)


# Under SFI NaCl, the loader currently depends on the allocate_code_data()
# interface provided by the IRT.
is_broken = not env.Bit('tests_use_irt') and not env.Bit('nonsfi_nacl')

dso1 = MakeAndTranslatePso(
    'test_pso', [env.ComponentObject('test_pso.c')],
    llvm_passes='-pnacl-abi-simplify-preopt -pnacl-abi-simplify-postopt')
dso2 = PsoFromLLVMAssembly('data_only_pso')
dso3 = PsoFromLLVMAssembly('data_only_pso_largebss')

dynloader_test = env.ComponentProgram(
    'dynloader_test', ['dynloader_test.c'],
    EXTRA_LIBS=['${NONIRT_LIBS}', 'pnacl_dynloader'])

node = env.CommandSelLdrTestNacl(
    'dynloader_test.out', dynloader_test, [dso1, dso2, dso3],
    # Add '-a' to enable filesystem access for opening DSOs.
    sel_ldr_flags=['-a'])
env.AddNodeToTestSuite(
    node, ['small_tests', 'toolchain_tests'],
    'run_pnacl_dynamic_loading_test', is_broken=is_broken)


# Use of the ConvertToPSO pass requires this toolchain version.
if env['TOOLCHAIN_FEATURE_VERSION'] < 22:
  Return()

test_pll = MakeAndTranslatePll('test_pll', 'test_pll.c')
test_pll_tls = MakeAndTranslatePll('test_pll_tls', 'test_pll_tls.c')

pll_symbols_test = env.ComponentProgram(
    'pll_symbols_test', ['pll_symbols_test.cc'],
    EXTRA_LIBS=['${NONIRT_LIBS}', 'pnacl_dynloader', 'pll_loader_lib'])

node = env.CommandSelLdrTestNacl(
    'pll_symbols_test.out', pll_symbols_test, [test_pll, test_pll_tls],
    # Add '-a' to enable filesystem access for opening DSOs.
    sel_ldr_flags=['-a'])
env.AddNodeToTestSuite(
    node, ['small_tests', 'toolchain_tests'],
    'run_pll_symbols_test', is_broken=is_broken)


test_pll_a = MakeAndTranslatePll('test_pll_a', 'test_pll_a.c')
test_pll_b = MakeAndTranslatePll('test_pll_b', 'test_pll_b.c')

pll_loader_test = env.ComponentProgram(
    'pll_loader_test', ['pll_loader_test.cc'],
    EXTRA_LIBS=['${NONIRT_LIBS}', 'pll_loader_lib'])

node = env.CommandSelLdrTestNacl(
    'pll_loader_test.out', pll_loader_test,
    [test_pll_a, test_pll_b, test_pll_tls],
    # Add '-a' to enable filesystem access for opening DSOs.
    sel_ldr_flags=['-a'])
env.AddNodeToTestSuite(
    node, ['small_tests', 'toolchain_tests'],
    'run_pll_loader_test', is_broken=is_broken)


libc_obj = env.Command(
    'libc${OBJSUFFIX}',
    # libnacl should come first so that it can override definitions in libc.
    [env.File('${LIB_DIR}/libnacl.a'),
     env.File('${NACL_SDK_LIB}/libc.a'),
     env.ComponentObject('libc_entry.c')],
    '${LD} -r --whole-archive ${SOURCES} -o ${TARGET}')

translated_pll_libc = MakeAndTranslatePso(
    'translated_pll_libc', libc_obj,
    llvm_passes=LLVM_PASSES)
translated_pll_hello_world = MakeAndTranslatePso(
    'translated_pll_hello_world',
    [env.ComponentObject('hello_world${OBJSUFFIX}',
                         '../hello_world/hello_world.c')],
    llvm_passes=LLVM_PASSES)

# Ideally we would have this ComponentProgram() definition in
# src/untrusted/pll_loader/nacl.scons instead; see the comment there for
# why we don't.
pll_loader = env.ComponentProgram(
    'pll_loader', [],
    EXTRA_LIBS=['${NONIRT_LIBS}', 'pll_loader_main', 'pll_loader_lib'])

node = env.CommandSelLdrTestNacl(
    'pll_hello_world_test.out', pll_loader,
    [translated_pll_libc, translated_pll_hello_world],
    # Add '-a' to enable filesystem access for opening DSOs.
    sel_ldr_flags=['-a'],
    stdout_golden=env.File('../hello_world/hello_world.stdout'))
env.AddNodeToTestSuite(
    node, ['small_tests', 'toolchain_tests'],
    'run_pll_hello_world_test', is_broken=is_broken)
